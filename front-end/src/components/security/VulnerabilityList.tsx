// app/src/components/security/VulnerabilityList.tsx

import React from 'react';
import { Card, CardHeader, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { useAnalytics } from '../../hooks/useAnalytics';
import { AlertTriangle, Bug, Zap, Info, ExternalLink } from 'lucide-react';
import { Alert, AlertDescription } from '../ui/alert';

interface Vulnerability {
    id: string;
    title: string;
    description: string;
    severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
    category: string;
    location?: string;
    recommendation: string;
    detected: number;
}

const SEVERITY_CONFIG = {
    CRITICAL: {
        color: 'bg-red-100 text-red-800',
        icon: <Zap className="h-4 w-4 text-red-500" />,
    },
    HIGH: {
        color: 'bg-orange-100 text-orange-800',
        icon: <AlertTriangle className="h-4 w-4 text-orange-500" />,
    },
    MEDIUM: {
        color: 'bg-yellow-100 text-yellow-800',
        icon: <Bug className="h-4 w-4 text-yellow-500" />,
    },
    LOW: {
        color: 'bg-blue-100 text-blue-800',
        icon: <Info className="h-4 w-4 text-blue-500" />,
    },
};

export const VulnerabilityList: React.FC<{ programId?: string }> = ({ programId }) => {
    const { analysis, isLoading, error } = useAnalytics(programId);
    const [selectedVulnerability, setSelectedVulnerability] = React.useState<Vulnerability | null>(null);

    // Mock vulnerabilities (replace with actual data from analysis)
    const vulnerabilities: Vulnerability[] = React.useMemo(() => [
        {
            id: 'VULN-001',
            title: 'Unchecked Account Validation',
            description: 'Program does not properly validate all account owners before processing instructions.',
            severity: 'HIGH',
            category: 'Access Control',
            location: 'process_instruction() -> validate_accounts()',
            recommendation: 'Implement comprehensive account validation checks for all instruction accounts.',
            detected: Date.now() - 3600000,
        },
        {
            id: 'VULN-002',
            title: 'Integer Overflow Risk',
            description: 'Potential integer overflow in arithmetic operations detected.',
            severity: 'CRITICAL',
            category: 'Arithmetic',
            location: 'update_state() -> calculate_total()',
            recommendation: 'Use checked arithmetic operations or SafeMath library.',
            detected: Date.now() - 7200000,
        },
        // Add more vulnerabilities as needed
    ], []);

    const renderSeverityBadge = (severity: Vulnerability['severity']) => (
        <Badge className={SEVERITY_CONFIG[severity].color}>
            <span className="flex items-center space-x-1">
                {SEVERITY_CONFIG[severity].icon}
                <span>{severity}</span>
            </span>
        </Badge>
    );

    const renderVulnerabilityDetails = (vuln: Vulnerability) => (
        <div className="space-y-4">
            <div className="flex justify-between items-start">
                <div>
                    <h3 className="text-lg font-semibold">{vuln.title}</h3>
                    <p className="text-sm text-gray-500">{vuln.category}</p>
                </div>
                {renderSeverityBadge(vuln.severity)}
            </div>

            <div className="space-y-2">
                <p className="text-sm text-gray-700">{vuln.description}</p>
                
                {vuln.location && (
                    <div className="text-sm">
                        <span className="font-medium">Location: </span>
                        <code className="bg-gray-100 px-1 py-0.5 rounded">
                            {vuln.location}
                        </code>
                    </div>
                )}
                
                <div className="bg-yellow-50 p-3 rounded-md">
                    <h4 className="font-medium text-sm">Recommendation</h4>
                    <p className="text-sm text-gray-700">{vuln.recommendation}</p>
                </div>

                <div className="text-sm text-gray-500">
                    Detected: {new Date(vuln.detected).toLocaleString()}
                </div>
            </div>

            <Button 
                variant="outline" 
                size="sm"
                className="mt-2"
                onClick={() => setSelectedVulnerability(null)}
            >
                Close Details
            </Button>
        </div>
    );

    return (
        <Card className="w-full">
            <CardHeader>
                <div className="flex justify-between items-center">
                    <div>
                        <h2 className="text-2xl font-bold">Vulnerabilities</h2>
                        <p className="text-sm text-gray-500">
                            Detected security issues and recommendations
                        </p>
                    </div>
                    {programId && (
                        <Badge variant="outline" className="text-xs">
                            {programId.slice(0, 4)}...{programId.slice(-4)}
                        </Badge>
                    )}
                </div>
            </CardHeader>

            <CardContent>
                {isLoading ? (
                    <div className="text-center py-4">
                        <p>Loading vulnerabilities...</p>
                    </div>
                ) : error ? (
                    <Alert variant="destructive">
                        <AlertDescription>{error}</AlertDescription>
                    </Alert>
                ) : selectedVulnerability ? (
                    renderVulnerabilityDetails(selectedVulnerability)
                ) : (
                    <div className="space-y-4">
                        {vulnerabilities.map((vuln) => (
                            <div
                                key={vuln.id}
                                className="p-4 border rounded-lg hover:bg-gray-50 cursor-pointer"
                                onClick={() => setSelectedVulnerability(vuln)}
                            >
                                <div className="flex justify-between items-start">
                                    <div>
                                        <div className="flex items-center space-x-2">
                                            <span className="font-medium">
                                                {vuln.title}
                                            </span>
                                            <span className="text-sm text-gray-500">
                                                {vuln.id}
                                            </span>
                                        </div>
                                        <p className="text-sm text-gray-600 mt-1">
                                            {vuln.description}
                                        </p>
                                    </div>
                                    {renderSeverityBadge(vuln.severity)}
                                </div>
                            </div>
                        ))}

                        <div className="flex justify-between items-center mt-4 pt-4 border-t">
                            <span className="text-sm text-gray-500">
                                Showing {vulnerabilities.length} vulnerabilities
                            </span>
                            <Button variant="outline" size="sm">
                                <ExternalLink className="h-4 w-4 mr-2" />
                                Export Report
                            </Button>
                        </div>
                    </div>
                )}
            </CardContent>
        </Card>
    );
};

export default VulnerabilityList;